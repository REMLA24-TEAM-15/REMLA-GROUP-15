name: Release
on:
  push:
    tags: ["v[0-9]+.[0-9]+.[0-9]+"]
  workflow_dispatch:
jobs:
  release:
    runs-on: ubuntu-latest
    env:
      TAG: ''
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Retrieve tag
        run: |
          TAG=$(grep 'version' params.yaml | awk '{print $2}')
          echo "TAG=$TAG" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ env.TAG }}
          release_name: Release v${{ env.TAG }}
          body: | 
            Release for URL Phishing detector.
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./release.joblib
          asset_name: release.joblib
          asset_content_type: application/octet-stream

  deploy-docs:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v4

      #- name: Configure Kaggle
      #  run: |
      #    mkdir -p ~/.kaggle
      #    echo "{\"username\":\"$KAGGLE_USERNAME\",\"key\":\"$KAGGLE_KEY\"}" > ~/.kaggle/kaggle.json
      #    chmod 600 ~/.kaggle/kaggle.json

      - name: Install poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install --no-root

      #- name: Authenticate with Kaggle
      #  run: poetry run kaggle datasets list

      - name: Install pdoc
        run: poetry run pip install pdoc3

      - name: Generate Docs
        run: |
          poetry run pdoc src --html --force --output-dir docs

      - name: Deploy Docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          publish_dir: ./docs/src